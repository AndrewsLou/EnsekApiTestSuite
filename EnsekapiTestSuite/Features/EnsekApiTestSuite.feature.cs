// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace EnsekBddTests.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("EnsekApiTestSuite")]
    public partial class EnsekApiTestSuiteFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "EnsekApiTestSuite.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual async System.Threading.Tasks.Task FeatureSetupAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(null, NUnit.Framework.TestContext.CurrentContext.WorkerId);
            global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "EnsekApiTestSuite", "A set of tests for testing the Ensek candidate API endpoints", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
            await testRunner.OnFeatureStartAsync(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            await testRunner.OnFeatureEndAsync();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get Request Sent to Energy Endpoint Returns 200 And List Of EnergyTypes")]
        [NUnit.Framework.CategoryAttribute("GetRequest")]
        public async System.Threading.Tasks.Task GetRequestSentToEnergyEndpointReturns200AndListOfEnergyTypes()
        {
            string[] tagsOfScenario = new string[] {
                    "GetRequest"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Get Request Sent to Energy Endpoint Returns 200 And List Of EnergyTypes", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await testRunner.WhenAsync("a Get request is sent to the Energy endpoint", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 8
await testRunner.ThenAsync("a 200 Ok Response is returned", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 9
 await testRunner.AndAsync("the Energy Data is deserialised", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table1 = new global::Reqnroll.Table(new string[] {
                            "EnergyData",
                            "EnergyId",
                            "PricePerUnit",
                            "QuantityOfUnits",
                            "UnitType"});
                table1.AddRow(new string[] {
                            "Electric",
                            "3",
                            "0.47",
                            "4170",
                            "kwh"});
                table1.AddRow(new string[] {
                            "Gas",
                            "1",
                            "0.34",
                            "2810",
                            "m�"});
                table1.AddRow(new string[] {
                            "Nuclear",
                            "2",
                            "0.56",
                            "0",
                            "MW"});
                table1.AddRow(new string[] {
                            "Oil",
                            "4",
                            "0.5",
                            "-359",
                            "Litres"});
#line 10
 await testRunner.AndAsync("the following Energy Data is returned", ((string)(null)), table1, "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Creating Order Of Each Fuel")]
        public async System.Threading.Tasks.Task CreatingOrderOfEachFuel()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Creating Order Of Each Fuel", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 17
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table2 = new global::Reqnroll.Table(new string[] {
                            "EnergyType",
                            "Quantity"});
                table2.AddRow(new string[] {
                            "Gas",
                            "1"});
                table2.AddRow(new string[] {
                            "Oil",
                            "1"});
                table2.AddRow(new string[] {
                            "Electric",
                            "1"});
                table2.AddRow(new string[] {
                            "Nuclear",
                            "1"});
#line 18
 await testRunner.GivenAsync("the following order is sent to the Buy endpoint", ((string)(null)), table2, "Given ");
#line hidden
#line 24
 await testRunner.WhenAsync("the Orders endpoint is called", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 25
 await testRunner.ThenAsync("a 200 Ok Response is returned", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 26
  await testRunner.AndAsync("the orders are deserialised", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 27
  await testRunner.AndAsync("the orders are added to the list of orders", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Creating An Order For An EnergyType That Does Not Exist")]
        public async System.Threading.Tasks.Task CreatingAnOrderForAnEnergyTypeThatDoesNotExist()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Creating An Order For An EnergyType That Does Not Exist", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 29
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 30
await testRunner.GivenAsync("the energy type \'99\' and quantity \'1\' is ordered", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 31
await testRunner.WhenAsync("an order is made to the Buy endpoint", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 32
await testRunner.ThenAsync("a 400 bad request is returned", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Delete an existing order returns 200 and removes order")]
        public async System.Threading.Tasks.Task DeleteAnExistingOrderReturns200AndRemovesOrder()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Delete an existing order returns 200 and removes order", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 35
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 36
await testRunner.GivenAsync("an order exists", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 37
await testRunner.WhenAsync("a Delete request is sent to the Delete Order endpoint", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 38
await testRunner.ThenAsync("a 200 Ok Response is returned", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 39
 await testRunner.AndAsync("the order is removed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
